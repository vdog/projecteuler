
decimalFromFraction = { n, d ->
	result = []
	remainders = []
	int q = n / d
	r = n % d
	result.push(q)
	remainders.push(r)
	while (r != 0){
		n = r * 10
		q = n / d
		r = n % d
		if(!remainders.contains(r) || q == 0){
			result.push(q)
			remainders.push(r)
		}else{
			index = 0
			while(remainders[index] != r){
				index++
			}
			length = remainders.size() - index 
			result.push(q)
			result.push(length * -1)
			r = 0
		}
	}
	return result
}

println decimalFromFraction(1,2)
println decimalFromFraction(1,3)
println decimalFromFraction(1,4)
println decimalFromFraction(1,5)
println decimalFromFraction(1,6)
println decimalFromFraction(1,7)
println decimalFromFraction(1,8)
println decimalFromFraction(1,9)
println decimalFromFraction(1,10)

max = 0
MAX_CHECK = 1000
for(j = 2; j < MAX_CHECK; j++){
	decimal = decimalFromFraction(1,j)
	println "$j - $decimal"
	if(decimal[decimal.size() - 1] * -1 > max){
		max = decimal[decimal.size() - 1] * -1
		println "New max: $max at $j - $decimal"
	}
}
